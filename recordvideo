#!/usr/bin/perl -w

# Thu Dec 26 03:29:00 GMT 2013
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;

our @videodevs= map { "/dev/video$_" } (0..3);
our @audiodevs_input= ("default", map { "hw:$_,0" } (0..3)); # XX: ,0 or ,1?  sigh
our @audiodevs_output= ("default", map { "hw:$_,0" } (0..3));
our $videosuffix= ".avi"; # XX config?

our $default_config=
  +{
    basedir=> "$ENV{HOME}/tmp/RECORDVIDEOTEST", ##
    videodev=> $videodevs[0],
    mplayer_playback_opts=> '-ao alsa:device="$MANGLEDAUDIOOUTPUTDEV"',
    inputoptions=> 'tv:// -tv driver=v4l2:device="$VIDEODEV":alsa:adevice="$MANGLEDAUDIOINPUTDEV":amode=1:audiorate=48000:forceaudio:immediatemode=0',
    # ^ XX add preferences field
    mencoder_cmd=>
	join(" ",
	     'mencoder',
	     '"${INPUTOPTIONS[@]}"',
	     '-really-quiet', # necessary over -quiet if "-" is to be used for output
	     '-noskip',
	     '-of lavf -lavfopts format=avi',
	     '-oac lavc -lavcopts acodec=libmp3lame:abitrate=320',
	     '-ovc lavc -lavcopts vcodec=mpeg4:vqmin=1:vqmax=4:lmin=1.0:lmax=4.0:mblmin=1.0:mblmax=4.0:vrc_minrate=1:keyint=100:vmax_b_frames=1',
	     '-o "$VIDEOPATH"'),
    audiodev_input=> $audiodevs_input[0],
    audiodev_output=> $audiodevs_output[0],
   };

our $playback_delay= 0; # seconds (config?)

my ($mydir, $myname);
BEGIN {
    use Cwd 'abs_path';
    my $location= (-l $0) ? abs_path ($0) : $0;
    $location=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [-v]

  Gtk3 program to record video tapes through a USB video grabber device.

  See ${mydir}README.md
  and ${mydir}INSTALL

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   ) or exit 1;
usage if @ARGV;

use lib "/opt/chj/perllib";
use lib "$mydir/lib";
use Chj::UIProcessor;
use Chj::Processes;
use Chj::xperlfunc ":all"; # xspawn
use Chj::chompspace;
use Chj::IO::Command;
use Chj::singlequote 'singlequote_sh';
use Chj::callcc;
use Gtk3 -init;
use Chj::Gtk::Helpers;
use Chj::Glib::Watcher;
use Chj::Recordvideo::Utils;
use Chj::Recordvideo::Devices;
use Chj::Config;

$Chj::Processes::verbose = $verbose;

# -------------

use Time::HiRes qw(time sleep);

sub xpoll_for_file_to_appear ($$) {
    my ($path,$timeout)=@_;
    my $start= time;
    while (not -e $path) {
	sleep 0.2;
	if (time - $start > $timeout) {
	    die "timeout waiting for file to appear: '$path'"
	}
    }
}

sub error;

sub mangle_dev ($) {
    my ($str)=@_;
    my $orig=$str;
    # turn hw:0,0 into hw.0,0 -- huh man page: hw=0.3
    #$str=~ s/:/./sg;
    #$str=~ tr/:,/=./;
    # default:CARD=C1100 -> default=CARD.C1100 ?
    # man mplayer: 'hw=<card>.<device>' 
    if ($str=~ s/^([^:=]+)//) {
	my $kind= $1;
	if ($str=~ s/^[:=]//) {
	    # there's more
	    if ($str=~ s/CARD=([^:=]+)//) {
		my $card = $1;
		if (length $str) {
		    error "don't know how to parse '$orig': have a remainder of '$str'";
		}
		"$kind=$card"
	    } else {
		error "don't know how to parse '$orig': no CARD, but ':'";
		$str
	    }
	} else {
	    if (length $str) {
		error "don't know how to parse '$orig'";
	    }
	    $kind
	}
    } else {
	error "don't know how to parse '$orig'";
	$str
    }
}

sub psname ($) {
    my ($name)= @_;
    $0= "recordvideo $name";
}

our $config;

sub config_save ($) {
    my ($cfg)=@_;
    $config= $cfg->do_save (\&error);
}

sub config ($) {
    my ($key)=@_;
    unless ($config) {
	config_save
	    (Chj::Config->new("$ENV{HOME}/.$myname.conf", $default_config)
	     ->do_load
	     (sub {
		 my ($id,@msg)=@_;
		 note (@msg),
	      },
	      sub { # confirm
		  my ($id,$msg)=@_;
		  my $ans= dialog("info", $msg, ["Quit", "Ok"], -1);
		  if ($ans==1) {
		      # return
		  } else {
		      # window close shall also always mean quit app.
		      do_quit ();
		      exit 0;
		  }
	      },
	      sub { # ask
		  my ($id, $msg,$buttons)=@_;
		  my $ans= dialog("question", $msg, $buttons, -1);
		  if ($ans < 0) {
		      do_quit ();
		      exit 0;
		  } else {
		      $ans
		  }
	      }));
    }
    $config->get($key)
}

sub templated_config ($$) {
    my ($key,$vars)=@_;
    # use the actual shell to do option parsing.  WARNING: unsafe code
    # execution! Also, beware of variable names that have special
    # meaning in the shell or linker.

    my $code= config $key;

    # treat array variables specially, as they cannot be passed as env
    # vars:
    my %aryvars;
    my %env;
    for my $var (keys %$vars) {
	my $v= $$vars{$var};
	if (ref $v) {
	    $aryvars{$var}= $v;
	} else {
	    $env{$var}= $v;
	}
    }

    my $in= Chj::IO::Command->new_sender
	(\%env,
	 "bash", "-c",
	 # set array variables
	 join("", map {
	     my $var=$_;
	     my $vals= $aryvars{$var};
	     my $i=0;
	     "declare -A $var; $var=("
		 .join(" ",map {"[".$i++."]=".singlequote_sh $_} @$vals).");\n"
	 } keys %aryvars).
	 q{set -eu; perl -we 'print $_,"\0" for @ARGV' -- }.$code);
    my @vals= $in->xreadline0;
    $in->xxfinish;
    local $/="\0"; chomp @vals;
    @vals
}

sub filepaths ($) {
    our ($tapename)= @_;
    our $basepath= $config->get("basedir")."/$tapename-";
    our @nums= sort {
	$a <=> $b
    } map {
	if (/\Q$basepath\E(\d+)/) {
	    $1
	} else {
	    warn "ignoring '$_'" if $verbose;
	    ()
	}
    } glob "${basepath}*";
    my $highest_num= $nums[-1] || 0;
    my $num= $highest_num+1;
    my $b= $basepath . $num;
    ($tapename . "-" . $num,
     $b . $videosuffix)
}

our $builder= new Gtk3::Builder;
$builder->add_from_file("$mydir/recordvideo.glade");

# get widget / gtk object
sub get ($) {
    my ($name)=@_;
    $builder->get_object($name)
      or die "missing object '$name' in glade file";
}

our $after_quit=0;


sub flatten {
    my @res;
    for (@_) {
	if (ref ($_) eq "ARRAY") {
	    push @res, flatten (@$_);
	} else {
	    push @res, $_;
	}
    }
    @res
}

sub dialog_markup {
    my ($msg,@args)=@_;
    '<b>'.xmlquote($msg).'</b>'."\n\n"
	.join("\n\n", map {xmlquote $_} @args)
}

sub make_messagedialog {
    my ($type,
	# GtkMessageType type -- expecting: info /
	# GTK_MESSAGE_INFO, warning / GTK_MESSAGE_WARNING,
	# question / GTK_MESSAGE_QUESTION, error /
	# GTK_MESSAGE_ERROR, other / GTK_MESSAGE_OTHER
	$buttonstype
	# GtkButtonsType buttons
	)=@_;
    sub {
	my ($msg,@args)= flatten @_;
	if ($after_quit) {
	    print STDERR "$type message during shutdown:\n",
	    "  $msg\n",
	    map {
		"  $_\n"
	    } @args;
	} else {
	    my $dlg= Gtk3::MessageDialog->new
	      (undef, # GtkWindow *parent
	       "modal", # "destroy_with_parent", # GtkDialogFlags flags
	       $type,
	       $buttonstype,
	       # const gchar *message_format, ...
	       "",
	      );
	    $dlg->set_markup(dialog_markup $msg,@args);
	    $dlg->set_title("$myname $type");
	    $dlg->set_resizable(1);
	    $dlg->run;
	    $dlg->destroy;
	}
    }
}

sub error;
*error= make_messagedialog ("error","close");
sub note;
*note=  make_messagedialog ("info","ok");

sub dialog ($$$$) {
    @_==4 or die;
    my ($type,
	# GtkMessageType type -- expecting:
	# info / GTK_MESSAGE_INFO,
	# warning / GTK_MESSAGE_WARNING,
	# question / GTK_MESSAGE_QUESTION, 
	# error / GTK_MESSAGE_ERROR,
	# other / GTK_MESSAGE_OTHER
	$msg_args,$buttons,$other_id)=@_;

    local our $dlg= Gtk3::MessageDialog->new
	(undef, # GtkWindow *parent
	 "modal", # "destroy_with_parent", # GtkDialogFlags flags
	 $type,
	 "none", # buttonstype,
	 # const gchar *message_format, ...
	 "",
	);
    $dlg->set_title("$myname $type");
    $dlg->set_resizable(1);
    $dlg->set_markup(dialog_markup flatten $msg_args);

    my $i=10;
    for (@$buttons) {
	$dlg->add_button($_, $i++);
    }
    #$dlg->show_all; # huh necessary otherwise the content_area does not show?
    my $answer= $dlg->run;
    $dlg->destroy;
    $answer >= 10 ? $answer-10 : $other_id
}

sub maybe_result2error($);
*maybe_result2error= make_maybe_result2error(\&error);
sub result2error ($) {
    my ($result)=@_;
    defined $result or error "Bug (result2error): expected result, got nothing";
    maybe_result2error $result;
}


our $statusbar = get "statusbar";
our $last_context_id;
sub status {
    my ($text)= @_;
    $statusbar->pop($last_context_id)
	if defined $last_context_id;
    our $context_id=
      $statusbar->get_context_id('$context_description');
    # WHAT IS THIS EVEN.  XX: does this leak memory?
    $last_context_id= $statusbar->push($context_id, $text);
}


our $tapename_entry = get "tapename_entry";
our $tapename_clear= get 'tapename_clear';
our $start_button = get 'button_start';
our $stop_button = get 'button_stop';
our $video_field= get 'video';
our $show_button= get 'button_show';

sub tapename_entry_action {
    update_start_button
	(defined maybe_valid_tapename_entry_text()
	 ? "tapename_good"
	 : "tapename_bad");
}
signal_set($tapename_entry,
	   on_change=> \&tapename_entry_action);

sub status_tapename {
    status "please enter tape name";
}

our $status= UIProcess {
    my ($msg)=@_;
    status $msg;
};

sub Perhaps_change_to ($$$) {
    my ($varref, $val, $changeproc)=@_;
    # XX just for integers for now. could use my equal.
    if ($$varref != $val) {
	$$varref= $val;
	warn "Perhaps_change_to: change for $varref $val $changeproc"
	    if $verbose;
	&$changeproc()
    }
}

our $is_recording=0; # boolean

# update_start_button can be called frequently, it will only update UI
# when necessary.
our $start_button_is_stopped=0;
our $start_button_asks_tapename=0;
our $start_button_tooltip_text_normal = $start_button->get_tooltip_text;
sub update_start_button ($) {
    my ($change_to)=@_;
    my $action= +{
	stopped=> sub {
	    $is_recording=1; # hacky to do this here?
	    Perhaps_change_to
		(\$start_button_is_stopped,1, sub {
		    $start_button->set_sensitive(1)
			unless $start_button_asks_tapename;
		 });
	},
	recording=> sub {
	    $is_recording=1; # hacky to do this here?
	    # turn off asks_tapename, too? Or rely on it done already.
	    Perhaps_change_to
		(\$start_button_is_stopped,0, sub {
		    # (BTW update_start_button won't refuse an update!
		    # The check for tapename must have been done
		    # before already)
		    $start_button->set_sensitive(0);
			#unless $start_button_asks_tapename;
		 });
	},
	tapename_good=> sub {
	    Perhaps_change_to
		(\$start_button_asks_tapename,0, sub {
		    $start_button->set_tooltip_text
			(#"start recording"
			 $start_button_tooltip_text_normal);
		    $start_button->set_sensitive(1)
			if $start_button_is_stopped;
		    status ""; # ready to start
		 });
	},
	tapename_bad=> sub {
	    Perhaps_change_to
		(\$start_button_asks_tapename,1, sub {
		    $start_button->set_tooltip_text("Start recording. Please first enter a tape name into the above field!");
		    $start_button->set_sensitive(0)
			if $start_button_is_stopped; # otherwise already at 0
		 });
	},
    }->{$change_to} or die "invalid argument";
    &$action();
}


sub mplayer_args {
    my (@args)=@_;
    my ($w,$h)= $video_field->get_size_request;
    my @cmd =
	("mplayer",
	 # "-slave", nope, makes playback break, for unfinished file I
	 # guess. Sigh is this all a hack.
	 "-wid", $video_field->get_id,
	 "-geometry", $w."x".$h,
	 "-quiet",
	 @args
	);
    \@cmd
}

sub xxINTlogsystem_mplayer {
    my ($logfh, @args)=@_;
    xxINTlogsystem ($logfh, 1, mplayer_args(@args));
}


sub Stop ($) {
    my ($maybe_process)=@_;
    if ($maybe_process) {
	$maybe_process->terminate;
	undef $_[0]; # hacky?
    }
}

our $uuid2then;
sub push_then ($$) {
    my ($process,$cont)=@_;
    my $uuid= $process->uuid;
    push @{ $$uuid2then{ $uuid } }, $cont;
}
sub maybe_pop_then ($) {
    my ($process)=@_;
    my $uuid= $process->uuid;
    if (my $then= $$uuid2then{ $uuid }) {
	my $cont= pop @$then;
	delete $$uuid2then{ $uuid } unless @$then;
	$cont
    } else {
	()
    }
}
sub then_is_zombie ($$) {
    my ($process,$reapit)=@_;
    my $uuid= $process->uuid;
    if (exists $$uuid2then{ $uuid }) {
	delete $$uuid2then{ $uuid }
	    if $reapit;
	1
    } else {
	0
    }
}

sub Stop_then ($$) {
    my ($maybe_process, $cont)=@_;
    if ($maybe_process) {
	if (then_is_zombie $maybe_process, 1) {
	    @_=(); goto $cont;
	} else {
	    push_then $maybe_process, $cont;
	    # XX also add a timeout event, so as to check with "kill 0"
	    # whether still around?
	    $maybe_process->terminate;
	    undef $_[0]; # hacky?
	}
    } else {
	@_=(); goto $cont
    }
}

our $collector= UIProcess {
    my ($result)= @_;
    result2error $result;
    my $sender= $result->sender;
    if (my $then= maybe_pop_then ($sender)) {
	@_=(); goto $then; # ok? context is from C call, thus no TCO anyway..
    } else {
	# XX memory leaking, but how else would I make
	# zombies?... (processes exiting before running Stop_then
	push_then $sender, undef;
    }
};

# recording
our $mencoder;
our $mplayer;
# echo
our $echo;
# test
our $aplay_test;

our $statusupdater;


sub maybe_valid_tapename_entry_text {
    my $tapename= chompspace $tapename_entry->get_text;
    if (length $tapename) {
	if ($tapename =~ m |^/|) {
	    status "'/' is used to separate subdirectory name from filename, cannot start with one";
	    undef
	} else {
	    $tapename
        }
    } else {
	status_tapename;
	undef
    }
}

sub delayed_mplayer_cmd () {
    [DBG
     @{mplayer_args
	   templated_config
	   ("mplayer_playback_opts",
	    +{
		MANGLEDAUDIOOUTPUTDEV=>
		    mangle_dev(config ("audiodev_output")),
		    AUDIOOUTPUTDEV=>
		    config ("audiodev_output"),
	    })},
     "-"]
}

sub inputoptions {
    templated_config
	("inputoptions",
	 +{VIDEODEV=> config("videodev"),
	   AUDIOINPUTDEV=> config ("audiodev_input"),
	   MANGLEDAUDIOINPUTDEV=>
	       mangle_dev(config ("audiodev_input"))})
}


sub do_start {
    $tapename_entry->set_editable(0); # avoid race condition (well)
    if (defined (my $tapename = maybe_valid_tapename_entry_text)) {
	my ($nameplus, $videopath)= filepaths $tapename;

	# kill echo process
	Stop_then $mplayer, sub {
	    Stop_then $echo, sub {

		# start recorder process
		$mencoder= Process {
		    psname "mencoder";
		    my $log= logfh "mencoder";
		    xxINTlogsystem($log,
				   1,
				   [DBG
				    templated_config
				    "mencoder_cmd",
				    +{VIDEODEV=> config ("videodev"),
				      AUDIOINPUTDEV=> config ("audiodev_input"),
				      MANGLEDAUDIOINPUTDEV=>
					  mangle_dev(config ("audiodev_input")),
				      VIDEOPATH=> $videopath,
				      INPUTOPTIONS=> [inputoptions],
				    }]);
		    unlink $log->path; # XX config?
		} $collector;

		$statusupdater= Process {
		    psname "statusupdater";
		    my $start= time; # hires!
		    my $lastd=-1; # last shown diff, integer
		    while (1) {
			my $t= time;
			my $d= int( $t - $start );
			if ($d != $lastd) {
			    $lastd=$d;
			    $status->send
				("recording ".t2hms ($d)." '$nameplus'");
			}
			sleep 0.2;
		    }
		} $collector;

		# start delayed play process
		$mplayer= pipeline_Process_with_prethunk
		    (sub {
			psname "delayed-mplayer";
			sleep $playback_delay;
			xpoll_for_file_to_appear $videopath, 10;
			close STDOUT;
			close STDERR;
			close STDIN;
		     },
		     [Subcmd
		      ("delayed_mplayer_tail",
		       [DBG
			"tail", "-f", "-c", "20000000", "--", $videopath]),
		      Subcmd
		      ("delayed_mplayer",
		       delayed_mplayer_cmd)],
		     $collector);

		$status->send ("recording '$nameplus'");
		# status is afterwards updated through sep process
		$tapename_entry->set_sensitive(0);
		$tapename_clear->set_sensitive(0);
		update_start_button ("recording");
		$stop_button->set_sensitive(1);
	    }
	};

    } else {
	$tapename_entry->set_editable(1);
    }
}

sub pipeline_Process {
    pipeline_Process_with_prethunk (sub{ }, [@_], $collector)
}

sub start_echo {
    $echo= pipeline_Process
	(Subcmd
	 ("echo_mplayer",
	  [DBG
	   @{mplayer_args
	     inputoptions,
	     templated_config
	     ("mplayer_playback_opts",
	     +{VIDEODEV=> config ("videodev"),
	       AUDIOOUTPUTDEV=> config ("audiodev_output"),
	       MANGLEDAUDIOOUTPUTDEV=>
		   mangle_dev(config ("audiodev_output")),
	      })}]));
}

sub make_restart {
    my ($varref, $start)=@_;
    sub {
	my ($maybe_cfg)=@_;
	Stop $$varref;
	if ($maybe_cfg) {
	    warn "YAY tmp config";
	    local $config= $maybe_cfg;
	    &$start ();
	} else {
	    &$start ();
	}
    }
}

sub restart_echo;
*restart_echo= make_restart (\$echo, \&start_echo);


sub do_stop {
    # stop recorders and playback
    Stop_then $mencoder, sub {
	Stop_then $mplayer, sub {
	    Stop $statusupdater;

	    start_echo;

	    status "stopped";
	    $tapename_clear->set_sensitive(1);
	    $tapename_entry->set_sensitive(1);
	    $tapename_entry->set_editable(1);
	    update_start_button ("stopped");
	    $stop_button->set_sensitive(0);
	}
    }
}

sub do_quit {
    # do this *before* closing windows, necessary?
    Stop $mplayer;
    # do rest here, too, anyway
    Stop $mencoder;
    Stop $echo;
    Stop $aplay_test;
    Stop $statusupdater;

    killall;
    $after_quit=1;
    Gtk3::main_quit;
}

sub do_about {
    my $about= get "aboutdialog1";
    my $escapeddir= singlequote_sh $mydir;
    my $version= `cd $escapeddir && git describe --always`;
    $about->set_version($version);
    $about->run;
    $about->set_visible(0);
}

# purely my choices
sub CANCEL() { 10 }
sub OK() { 12 }
sub REVERT() { 9 }
sub REVERT_DEFAULTS() { 8 }

sub ask_location {
    local our $chooser= get "filechooserdialog1";
    my $ask_location;
  ASK: {
	my $res= $chooser->run;
	if ($res == OK) {
	    if (defined (my $path= $chooser->get_filename)) {
		if (-d $path) {
		    $ask_location= $path;
		} else {
		    error "Choosen path does not point to a directory", $path;
		    # heh that we set visibility of $chooser to 0 only
		    # later on might actually be a good thing; or even:
		    # continue to use it!
		    redo ASK;
		}
	    } else {
		error "You haven't chosen any location.",
		  "If you don't want to choose anything, press cancel instead.";
		redo ASK;
	    }
	} else {
	    warn "location cancel" if $verbose;
	}
	$chooser->set_visible(0);
    }
    $ask_location
}

sub do_location {
    if (defined (my $path= ask_location)) {
	config_save ($config->set("basedir", $path));
    }
}

our $settings_button_location= get('settings_button_location');
our $settings_button_play_sound= get('settings_button_play_sound');
our $settings_button_play_sound__label_normal = $settings_button_play_sound->get_label;
our $settings_button_play_sound__label_stop   = "         Stop         ";
our $settings_button_reroute_sound= get 'settings_button_reroute_sound';
our $settings_button_reroute_video= get 'settings_button_reroute_video';

our $do_settings__cfg; # in UI thread, set/maintained by do_settings
sub do_settings__cfg_set ($$) {
    $do_settings__cfg= $do_settings__cfg->set(@_);
}

# XX eliminate one of the Try buttons?
signal_set ($settings_button_reroute_sound,
	    clicked=> sub {
		get_input_fields();
		restart_echo ($do_settings__cfg);
	    });
signal_set ($settings_button_reroute_video,
	    clicked=> sub {
		get_input_fields();
		restart_echo ($do_settings__cfg);
	    });

our ($settings_button_play_sound__to_normal, $settings_button_play_sound__to_stop);

$settings_button_play_sound__to_normal= UIProcess {
    my ($maybe_result)= @_;
    maybe_result2error $maybe_result;
    $settings_button_play_sound->set_label($settings_button_play_sound__label_normal);
    start_echo
	# unless already running, or recording
	unless ($echo or $is_recording);
    signal_set
	($settings_button_play_sound,
	 clicked => sub {
	     get_audiodev_output();
	     Stop $echo; # XX was aplay_echo, does it stop too much now?
	     Stop $aplay_test; # should never happen, though.
	     $aplay_test= Process {
		 psname "aplay_test";
		 $settings_button_play_sound__to_stop->send;
		 xxINTlogsystem(logfh "aplay",
				1,
				[DBG
				 "aplay", "-D", $do_settings__cfg->get("audiodev_output"),
				 "--", $mydir."/Media/Slurp.wav"]);
	     } $settings_button_play_sound__to_normal;
	 });
};

$settings_button_play_sound__to_stop= UIProcess {
    my ($maybe_result)= @_;
    signal_set($settings_button_play_sound,
	       clicked => sub {
		   Stop $aplay_test;
		   # ^ this will also call $settings_button_play_sound__to_normal
	       });
    $settings_button_play_sound->set_label($settings_button_play_sound__label_stop);
};

sub error_undefined ($) {
    my ($key)=@_;
    error("The stored settings are missing a value for '$key'",
	  "I'll use the empty string instead, please set it to something after closing this dialog.");
}

sub ComboBox {
    @_==4 or die;
    my ($cfgkey,$defaults,$connected_hash, $val)=@_;
    if (!defined $val) {
	error_undefined $cfgkey;
	$val="";
    }
    my $guikey= $cfgkey."_combobox";
    my $cb= get $guikey;
    $cb->remove_all;
    my $alldevs=
      +{
	map { $_=> 1} keys (%$connected_hash), @$defaults, $val
       };
    my $i=0;
    for my $dev (sort keys %$alldevs) {
	my $maybe_name= $$connected_hash{$dev};
	my $desc= $maybe_name ? "$dev ($maybe_name)" : $dev;
	$cb->append($i++,$desc);
    }
    # add editable/selected entry
    my $entry= $cb->get_child;
    $entry->set_text($val);
    bless { cb=> $cb,
	    key=> $cfgkey }, "PFLANZE::ComboBox";
}

{
    package PFLANZE::ComboBox;
    sub get_text_part1 {
	@_==2 or die;
	my ($s,$on_err)=@_;
	my $val= $$s{cb}->get_active_text;
	my ($val_field1)= $val=~ m|^\s*(\S+)|
	  or do {
	      main::error( "Field '$$s{key}' is empty",
			   "please choose an entry from the menu" );
	      @_=(); goto $on_err;
	  };
	$val_field1
    }
}

our $do_settings__dlg= get "dialog_settings";

our ($videodev_combobox, $audiodev_input_combobox, $audiodev_output_combobox);

sub get_audiodev_output {
    do_settings__cfg_set
	("audiodev_output", $audiodev_output_combobox->get_text_part1
	 (\&redo_settings));
}

sub get_input_fields {
    # get input fields
    my $get_input= sub {
	my ($name)=@_;
	my $widget= get $name;
	do_settings__cfg_set($name, $widget->get_text);
    };
    &$get_input ("inputoptions");
    &$get_input ("mplayer_playback_opts");
    &$get_input ("mencoder_cmd");

    do_settings__cfg_set
	("videodev",
	 $videodev_combobox->get_text_part1(\&redo_settings));
    do_settings__cfg_set
	("audiodev_input",
	 $audiodev_input_combobox->get_text_part1(\&redo_settings));
    get_audiodev_output;
}

sub redo_settings {
    my $set_location_button= sub {
	$settings_button_location->set_label($do_settings__cfg->get("basedir"));
    };
    signal_set($settings_button_location,
	       clicked=> sub {
		   if (defined (my $path= ask_location)) {
		       do_settings__cfg_set("basedir", $path);
		       &$set_location_button;
		   }
	       });
    &$set_location_button;

    # set popup menues
    $videodev_combobox=
	 ComboBox ("videodev", \@videodevs,
		   get_v4ldevices, $do_settings__cfg->get("videodev"));
    $audiodev_input_combobox=
	 ComboBox ("audiodev_input", \@audiodevs_input,
		   get_audio_devices(0), $do_settings__cfg->get("audiodev_input"));
    $audiodev_output_combobox=
	 ComboBox ("audiodev_output", \@audiodevs_output,
		   get_audio_devices(1), $do_settings__cfg->get("audiodev_output"));

    # set input fields
    my $set_input= sub {
	   my ($name)=@_;
	   my $val= $do_settings__cfg->get($name);
	   if (! defined $val) {
	       error_undefined $name;
	       $val="";
	   }
	   my $widget= get $name;
	   #set_visible(1)
	   $widget->set_text($val);
    };
    &$set_input ("inputoptions");
    &$set_input ("mplayer_playback_opts");
    &$set_input ("mencoder_cmd");

    $settings_button_play_sound__to_normal->send;

    my $perhaps_restart_echo= sub {
	unless ($is_recording) {
	    restart_echo;
	}
    };

    my $res= $do_settings__dlg->run;
    if ($res == OK) {
	get_input_fields;

	$do_settings__dlg->set_visible (0);
	# 'commit'
	config_save ($do_settings__cfg);
	# restart echo with new settings:
	&$perhaps_restart_echo;
    } elsif ($res == REVERT_DEFAULTS) {
	$do_settings__cfg= $do_settings__cfg->set_values($default_config);
	goto \&redo_settings;
    } elsif ($res == REVERT) {
	goto \&do_settings;
    } else {
	warn "settings cancelled" if $verbose;
	$do_settings__dlg->set_visible (0);
	# restart echo with old settings (stopping "try" stuff):
	&$perhaps_restart_echo;
	# ^ XX only if there were any changes? but can't even just
	# compare $cfg since it may have been different when hitting
	# Try; thus save the config of the last Try? Hm, pure
	# functions, I mean, only re-run the function if it has
	# changed. Well, FRP?
    }
    Stop $aplay_test;
}

sub do_settings {
    $do_settings__cfg= $config;
    goto \&redo_settings;
}

sub do_show {
    xspawn "xdg-open", config "basedir";
}



{
    # connect menu actions
    for (qw(location quit about settings)) {
	my $item= get "menu_$_";
	my $proc= do {
	    no strict 'refs';
	    *{"do_$_"}{CODE}
	};
	signal_set($item, activate => $proc);
    }
}

update_start_button ("stopped");
update_start_button ("tapename_bad");
$stop_button->set_sensitive(0);
status_tapename;


signal_set($tapename_clear,
	   clicked => sub {
	       $tapename_entry->set_text("");
	       $tapename_entry->grab_focus;
	       tapename_entry_action;
	   });

signal_set($start_button, clicked => \&do_start);
signal_set($stop_button, clicked => \&do_stop);
signal_set($show_button, clicked => \&do_show);

our $window1= get "window1";
signal_set($window1, "delete-event"=> \&do_quit);
$window1->show_all;

#use Chj::repl; repl; exit;
start_echo;

$tapename_entry->grab_focus;

use Chj::Backtrace;
#use Chj::repl; repl; exit;
Gtk3->main;

# $status->end; now unnecessary or bad as it's an UIProcess now

